// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.1
// source: controller.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// D2Client is the client API for D2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type D2Client interface {
	Move(ctx context.Context, in *MoveDetails, opts ...grpc.CallOption) (*Empty, error)
}

type d2Client struct {
	cc grpc.ClientConnInterface
}

func NewD2Client(cc grpc.ClientConnInterface) D2Client {
	return &d2Client{cc}
}

func (c *d2Client) Move(ctx context.Context, in *MoveDetails, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protogen.D2/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// D2Server is the server API for D2 service.
// All implementations must embed UnimplementedD2Server
// for forward compatibility
type D2Server interface {
	Move(context.Context, *MoveDetails) (*Empty, error)
	mustEmbedUnimplementedD2Server()
}

// UnimplementedD2Server must be embedded to have forward compatible implementations.
type UnimplementedD2Server struct {
}

func (UnimplementedD2Server) Move(context.Context, *MoveDetails) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedD2Server) mustEmbedUnimplementedD2Server() {}

// UnsafeD2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to D2Server will
// result in compilation errors.
type UnsafeD2Server interface {
	mustEmbedUnimplementedD2Server()
}

func RegisterD2Server(s grpc.ServiceRegistrar, srv D2Server) {
	s.RegisterService(&D2_ServiceDesc, srv)
}

func _D2_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(D2Server).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protogen.D2/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(D2Server).Move(ctx, req.(*MoveDetails))
	}
	return interceptor(ctx, in, info, handler)
}

// D2_ServiceDesc is the grpc.ServiceDesc for D2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var D2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protogen.D2",
	HandlerType: (*D2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Move",
			Handler:    _D2_Move_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller.proto",
}
